<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <title>Karbun Coin ICO</title>
  <!-- mobile responsive meta -->
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="viewport"
    content="width=device-width, initial-scale=1.0, user-scalable=1.0, minimum-scale=1.0, maximum-scale=1.0" />
  <link rel="icon" type="image/png" sizes="16x16" href="user_assets/img/favicon.png" />
  <meta name="theme-color" content="#ffffff" />
  <link rel="stylesheet" href="user_assets/css/style.css" />
  <link rel="stylesheet" href="user_assets/css/responsive.css" />
  <style>
     #google_translate_element {
        color: #fcbf10;
        background-color: transparent;
        border: none;
        padding: 0;
        margin: 0;
      }
  </style>
</head>

<body class="active-preloader-ovh">
  <header class="header header-home-one">
    <nav class="navbar navbar-default header-navigation stricky">
      <div class="thm-container clearfix">
        <div class="navbar-header">
          <a
            href="javascript:void(0);"
            onclick="BuyEth()"
            style="display: none"
            class="for-mobile-show metamask-link"
          >
           <img
              src="user_assets/img/meta-icon.png"
              style="height: 35px; width: auto"
            />
             <small style="font-size: 12px; font-weight: 400"
              >Connect wallet</small
            >
          </a>
          
          <button
            type="button"
            class="navbar-toggle collapsed bitmex-icon-menu"
            data-toggle="collapse"
            data-target=".main-navigation"
            aria-expanded="false"
          ></button>
          <a class="navbar-brand" href="">
            <img src="user_assets/img/logo.png" style="height: 80px" />
          </a>
        </div>

        <div class="collapse navbar-collapse main-navigation mainmenu" id="main-nav-bar">
          <ul class="nav navbar-nav navigation-box navbar-right">
            <li><a href="/#about">About Karbun</a></li>
            <!--  <li><a href="#news">Karbun Partners</a> </li> -->
            <li><a
              href="#"
              data-toggle="modal"
              data-target="#whitepaperModal"
              style="font-size: 16px" >Whitepaper</a>
          </li>
            </li>
            <li><a href="/#login">Join </a></li>
            <li><a href="/#our-experts">Team </a></li>
            <li><a href="/#roadmap">Roadmap</a></li>

            <li><a href="/#contact-us">Contact Karbun</a></li>
            <li><a href="/terms">T&C</a></li>

            <li style="padding-top: 25px;padding-right:15px;" class="text/css">
              <button id="google_translate_element"></button>

              <div id="google_translate_element"></div>
              <script>
                function googleTranslateElementInit() {
                  new google.translate.TranslateElement(
                    {
                      pageLanguage: "en",
                      autoDisplay: "true",
                      layout:
                        google.translate.TranslateElement.InlineLayout
                          .HORIZONTAL,
                    },
                    "google_translate_element"
                  );
                }
              </script>
              <script src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

              <style type="text/css">
                /*google translate Dropdown */

                #google_translate_element select {
                  background: #1a874e !important;
                  color: #fff;
                  padding: 8px 10px;
                  border: none;
                  border-radius: 3px;
                  height: auto !important;
                }

                /*google translate link | logo */
                .goog-logo-link {
                  display: none !important;
                }
                .goog-te-gadget {
                  color: transparent !important;
                }

                /* google translate banner-frame */

                .goog-te-banner-frame {
                  display: none !important;
                }

                .skiptranslate.goog-te-gadget > div {
                  display: block !important;
                  width: 100% !important;
                }
                .goog-te-gadget {
                  font-family: arial;
                  font-size: 11px;
                  color: #666;
                  white-space: nowrap;
                  max-height: 32px;
                }
              </style>
            </li>
            <!-- <li class="xs-hide metamask-outer">
              <a class="metamask-link" href="javascript:void(0);" onclick="BuyEth()">
                <img
                  src="user_assets/img/meta-icon.png"
                  style="height: 35px; width: auto"
                />
                <small style="font-size: 12px; font-weight: 400"
                  >Connect wallet</small
                >
              </a>
            </li> -->

          </ul>
        </div>
        <!-- /.navbar-collapse -->
      </div>
      <!-- /.container -->
    </nav>
  </header>

  <body>
    <iframe width="100%" height="2000px" frameborder="0" marginwidth="10px" marginheight="0" scrolling="no"
      src="https://calculator.carbonfootprint.com/calculator.aspx"></iframe>

  </body>

<!-- Modal -->
<div
class="modal fade comming-soon-popup"
id="whitepaperModal"
tabindex="-1"
role="dialog"
aria-labelledby="exampleModalLabel"
aria-hidden="true"
>
<div class="modal-dialog" role="document">
  <div class="modal-content">
    <div class="modal-body">
      <button
        type="button"
        class="close"
        data-dismiss="modal"
        aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
      <div class="whitepaper-form">
        <h2>
          Please enter your email address to download the whitepaper.
        </h2>
        <form method="POST" action="whitepaper">
          <div class="form-group">
            <label>Email address</label>
            <input
              type="email"
              name="email"
              class="form-control"
              id=""
              placeholder="Enter email"
              required
            />
          </div>

          <button
            
            type="submit"
            class="thm-btn yellow-bg-hvr"
          >
            Submit
          </button>
        </form>
      </div>
    </div>
  </div>
</div>
</div>

<script src="user_assets/js/jquery.js"></script>

<script src="user_assets/js/bootstrap.min.js"></script>
<script src="user_assets/js/bootstrap-select.min.js"></script>
<script src="user_assets/js/jquery.validate.min.js"></script>
<script src="user_assets/js/owl.carousel.min.js"></script>
<script src="user_assets/js/isotope.js"></script>
<script src="user_assets/js/jquery.magnific-popup.min.js"></script>
<script src="user_assets/js/waypoints.min.js"></script>
<script src="user_assets/js/jquery.counterup.min.js"></script>
<script src="user_assets/js/wow.min.js"></script>
<script src="user_assets/js/jquery.easing.min.js"></script>
<script src="user_assets/js/particles.min.js"></script>
<script src="user_assets/js/particles-config.js"></script>
<script src="user_assets/js/Chart.min.js"></script>
<script src="user_assets/js/chart-config.js"></script>
<script src="user_assets/js/custom.js"></script>

  <script>
    // Unpkg imports
    const Web3Modal = window.Web3Modal.default;
    const WalletConnectProvider = window.WalletConnectProvider.default;
    const EvmChains = window.EvmChains;
    const Fortmatic = window.Fortmatic;

    // Web3modal instance
    let web3Modal;

    // Chosen wallet provider given by the dialog window
    let provider;

    // Address of the selected account
    let selectedAccount;

    /**
     * Setup the orchestra
     */
    function init() {
      console.log("Initializing example");
      console.log("WalletConnectProvider is", WalletConnectProvider);
      // console.log("Fortmatic is", Fortmatic);

      // Tell Web3modal what providers we have available.
      // Built-in web browser provider (only one can exist as a time)
      // like MetaMask, Brave or Opera is added automatically by Web3modal
      const providerOptions = {
        walletconnect: {
          package: WalletConnectProvider,
          options: {
            rpc: {
              3: "https://ropsten.infura.io/v3/5e1b7d94f4784e86a1b2511857f15287",
            },
            network: "ropsten",
            chainId: 3,
            // infuraId: "bnb1a5cae5d9hp0we9cx9v02n9hvmt94nnuguv0fav",
          },
        },
      };

      web3Modal = new Web3Modal({
        cacheProvider: false, // optional
        providerOptions, // required
      });
    }

    function BuyEth() {
      startBuy();
    }
    async function startBuy() {
      // console.log("Opening a dialog", web3Modal);
      try {
        provider = await web3Modal.connect();
      } catch (e) {
        console.log("Could not get a wallet connection", e);
        return;
      }

      // Subscribe to accounts change: If the account is changed, the transactions goes on those accounts
      // provider.on("accountsChanged", (accounts) => {
      //     BuyToken();
      // });

      // Subscribe to chainId change
      // provider.on("chainChanged", (chainId) => {
      //     //BuyContent();
      //     BuyToken();
      // });

      await resetAccountDataAll();
    }
    init();

    async function resetAccountDataAll() {
      await BuyToken(provider);
    }

    function decimalToHexString(number) {
      if (number < 0) {
        number = 0xffffffff + number + 1;
      }
      return number.toString(16).toUpperCase();
    }

    async function BuyToken() {
      // Get a Web3 instance for the wallet
      const web3 = new Web3(provider);

      const chainId = await web3.eth.getChainId();

      const accounts = await web3.eth.getAccounts();

      // console.log("Got accounts", accounts);
      selectedAccount = accounts[0];

      // Go through all accounts and get their ETH balance
      const rowResolvers = accounts.map(async (address) => {
        const balance = await web3.eth.getBalance(address);
      });

      // until data for all accounts is loaded
      await Promise.all(rowResolvers);

      console.log("abcd", selectedAccount, chainId, web3);
    }

    async function resetAccountBid() {
      await bid(provider);
    }

    async function bidNow() {
      console.log("Opening a dialog", web3Modal);
      try {
        provider = await web3Modal.connect();
      } catch (e) {
        console.log("Could not get a wallet connection", e);
        return;
      }

      await resetAccountBid();
    }

    async function bid() {
      // Get a Web3 instance for the wallet
      const web3 = new Web3(provider);

      const chainId = await web3.eth.getChainId();

      const accounts = await web3.eth.getAccounts();

      // console.log("Got accounts", accounts);
      selectedAccount = accounts[0];

      // Go through all accounts and get their ETH balance
      const rowResolvers = accounts.map(async (address) => {
        const balance = await web3.eth.getBalance(address);
      });

      // until data for all accounts is loaded
      await Promise.all(rowResolvers);

      console.log("abcd", selectedAccount, chainId, web3);
      const nonce = await web3.eth.getTransactionCount(
        selectedAccount,
        "latest"
      ); //get latest nonce
      const from_account = web3.utils.toChecksumAddress(selectedAccount);
      const Admin = web3.utils.toChecksumAddress(
        "0xF24a24Ab64a29edd50ACC655f4dd78360888A83e"
      );
      var amt = document.getElementById("bidding").value;

      let estimates_gas = await web3.eth.estimateGas({
        from: accounts[0],
        to: Admin,
      });

      console.log("gas fees", estimates_gas);

      let gasLimit = web3.utils.toHex(estimates_gas * 2);
      let gasPrice_bal = await web3.eth.getGasPrice();
      let gasPrice = web3.utils.toHex(gasPrice_bal * 2);

      tx = {
        from: accounts[0],
        to: Admin,
        nonce: nonce,
        gas: 500000,
        value: "0x" + (amt * 1000000000000000000 * 0.00023755).toString(16),
      };

      web3.eth.sendTransaction(tx, function (err, hash) {
        if (!err) {
          // Add modal

          const expectedBlockTime = 1000; // 1sec

          const sleep = (milliseconds) => {
            return new Promise((resolve) =>
              setTimeout(resolve, milliseconds)
            );
          };
          (async function () {
            let transactionReceipt = null;
            while (transactionReceipt == null) {
              // Waiting expectedBlockTime until the transaction is mined
              transactionReceipt = await web3.eth.getTransactionReceipt(hash);
              await sleep(expectedBlockTime);
            }
            console.log("trx", transactionReceipt);

            console.log("trx receipt", transactionReceipt.status);
            if (transactionReceipt.status) {
            }
          })();
        } else {
          console.log(err);
        }
      });
    }
  </script>
</body>

</html>